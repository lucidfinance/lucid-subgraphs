// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ClaimCreated extends ethereum.Event {
  get params(): ClaimCreated__Params {
    return new ClaimCreated__Params(this);
  }
}

export class ClaimCreated__Params {
  _event: ClaimCreated;

  constructor(event: ClaimCreated) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get parent(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creditor(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get debtor(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get origin(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get description(): string {
    return this._event.parameters[6].value.toString();
  }

  get claim(): ClaimCreatedClaimStruct {
    return changetype<ClaimCreatedClaimStruct>(
      this._event.parameters[7].value.toTuple()
    );
  }

  get blocktime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class ClaimCreatedClaimStruct extends ethereum.Tuple {
  get claimAmount(): BigInt {
    return this[0].toBigInt();
  }

  get paidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get dueBy(): BigInt {
    return this[3].toBigInt();
  }

  get debtor(): Address {
    return this[4].toAddress();
  }

  get claimToken(): Address {
    return this[5].toAddress();
  }

  get attachment(): ClaimCreatedClaimAttachmentStruct {
    return changetype<ClaimCreatedClaimAttachmentStruct>(this[6].toTuple());
  }
}

export class ClaimCreatedClaimAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class ClaimPayment extends ethereum.Event {
  get params(): ClaimPayment__Params {
    return new ClaimPayment__Params(this);
  }
}

export class ClaimPayment__Params {
  _event: ClaimPayment;

  constructor(event: ClaimPayment) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get debtor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get paidBy(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get paidByOrigin(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class ClaimRejected extends ethereum.Event {
  get params(): ClaimRejected__Params {
    return new ClaimRejected__Params(this);
  }
}

export class ClaimRejected__Params {
  _event: ClaimRejected;

  constructor(event: ClaimRejected) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimRescinded extends ethereum.Event {
  get params(): ClaimRescinded__Params {
    return new ClaimRescinded__Params(this);
  }
}

export class ClaimRescinded__Params {
  _event: ClaimRescinded;

  constructor(event: ClaimRescinded) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeePaid extends ethereum.Event {
  get params(): FeePaid__Params {
    return new FeePaid__Params(this);
  }
}

export class FeePaid__Params {
  _event: FeePaid;

  constructor(event: FeePaid) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get collectionAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get transactionFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class LucidManagerSet extends ethereum.Event {
  get params(): LucidManagerSet__Params {
    return new LucidManagerSet__Params(this);
  }
}

export class LucidManagerSet__Params {
  _event: LucidManagerSet;

  constructor(event: LucidManagerSet) {
    this._event = event;
  }

  get prevLucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newLucidManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get blocktime(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LucidTxERC721__createClaimInputAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class LucidTxERC721__createClaimWithURIInputAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class LucidTxERC721__getClaimResultValue0Struct extends ethereum.Tuple {
  get claimAmount(): BigInt {
    return this[0].toBigInt();
  }

  get paidAmount(): BigInt {
    return this[1].toBigInt();
  }

  get status(): i32 {
    return this[2].toI32();
  }

  get dueBy(): BigInt {
    return this[3].toBigInt();
  }

  get debtor(): Address {
    return this[4].toAddress();
  }

  get claimToken(): Address {
    return this[5].toAddress();
  }

  get attachment(): LucidTxERC721__getClaimResultValue0AttachmentStruct {
    return changetype<LucidTxERC721__getClaimResultValue0AttachmentStruct>(
      this[6].toTuple()
    );
  }
}

export class LucidTxERC721__getClaimResultValue0AttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class LucidTxERC721 extends ethereum.SmartContract {
  static bind(address: Address): LucidTxERC721 {
    return new LucidTxERC721("LucidTxERC721", address);
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createClaim(
    creditor: Address,
    debtor: Address,
    description: string,
    claimAmount: BigInt,
    dueBy: BigInt,
    claimToken: Address,
    attachment: LucidTxERC721__createClaimInputAttachmentStruct
  ): BigInt {
    let result = super.call(
      "createClaim",
      "createClaim(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8)):(uint256)",
      [
        ethereum.Value.fromAddress(creditor),
        ethereum.Value.fromAddress(debtor),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(claimAmount),
        ethereum.Value.fromUnsignedBigInt(dueBy),
        ethereum.Value.fromAddress(claimToken),
        ethereum.Value.fromTuple(attachment)
      ]
    );

    return result[0].toBigInt();
  }

  try_createClaim(
    creditor: Address,
    debtor: Address,
    description: string,
    claimAmount: BigInt,
    dueBy: BigInt,
    claimToken: Address,
    attachment: LucidTxERC721__createClaimInputAttachmentStruct
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createClaim",
      "createClaim(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8)):(uint256)",
      [
        ethereum.Value.fromAddress(creditor),
        ethereum.Value.fromAddress(debtor),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(claimAmount),
        ethereum.Value.fromUnsignedBigInt(dueBy),
        ethereum.Value.fromAddress(claimToken),
        ethereum.Value.fromTuple(attachment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createClaimWithURI(
    creditor: Address,
    debtor: Address,
    description: string,
    claimAmount: BigInt,
    dueBy: BigInt,
    claimToken: Address,
    attachment: LucidTxERC721__createClaimWithURIInputAttachmentStruct,
    _tokenUri: string
  ): BigInt {
    let result = super.call(
      "createClaimWithURI",
      "createClaimWithURI(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8),string):(uint256)",
      [
        ethereum.Value.fromAddress(creditor),
        ethereum.Value.fromAddress(debtor),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(claimAmount),
        ethereum.Value.fromUnsignedBigInt(dueBy),
        ethereum.Value.fromAddress(claimToken),
        ethereum.Value.fromTuple(attachment),
        ethereum.Value.fromString(_tokenUri)
      ]
    );

    return result[0].toBigInt();
  }

  try_createClaimWithURI(
    creditor: Address,
    debtor: Address,
    description: string,
    claimAmount: BigInt,
    dueBy: BigInt,
    claimToken: Address,
    attachment: LucidTxERC721__createClaimWithURIInputAttachmentStruct,
    _tokenUri: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createClaimWithURI",
      "createClaimWithURI(address,address,string,uint256,uint256,address,(bytes32,uint8,uint8),string):(uint256)",
      [
        ethereum.Value.fromAddress(creditor),
        ethereum.Value.fromAddress(debtor),
        ethereum.Value.fromString(description),
        ethereum.Value.fromUnsignedBigInt(claimAmount),
        ethereum.Value.fromUnsignedBigInt(dueBy),
        ethereum.Value.fromAddress(claimToken),
        ethereum.Value.fromTuple(attachment),
        ethereum.Value.fromString(_tokenUri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClaim(tokenId: BigInt): LucidTxERC721__getClaimResultValue0Struct {
    let result = super.call(
      "getClaim",
      "getClaim(uint256):((uint256,uint256,uint8,uint256,address,address,(bytes32,uint8,uint8)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<LucidTxERC721__getClaimResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getClaim(
    tokenId: BigInt
  ): ethereum.CallResult<LucidTxERC721__getClaimResultValue0Struct> {
    let result = super.tryCall(
      "getClaim",
      "getClaim(uint256):((uint256,uint256,uint8,uint256,address,address,(bytes32,uint8,uint8)))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LucidTxERC721__getClaimResultValue0Struct>(value[0].toTuple())
    );
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lucidManager(): Address {
    let result = super.call("lucidManager", "lucidManager():(address)", []);

    return result[0].toAddress();
  }

  try_lucidManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("lucidManager", "lucidManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextClaimId(): BigInt {
    let result = super.call("nextClaimId", "nextClaimId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextClaimId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextClaimId", "nextClaimId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get lucidManager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseURI_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CreateClaimCall extends ethereum.Call {
  get inputs(): CreateClaimCall__Inputs {
    return new CreateClaimCall__Inputs(this);
  }

  get outputs(): CreateClaimCall__Outputs {
    return new CreateClaimCall__Outputs(this);
  }
}

export class CreateClaimCall__Inputs {
  _call: CreateClaimCall;

  constructor(call: CreateClaimCall) {
    this._call = call;
  }

  get creditor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debtor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get claimAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get dueBy(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get claimToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get attachment(): CreateClaimCallAttachmentStruct {
    return changetype<CreateClaimCallAttachmentStruct>(
      this._call.inputValues[6].value.toTuple()
    );
  }
}

export class CreateClaimCall__Outputs {
  _call: CreateClaimCall;

  constructor(call: CreateClaimCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateClaimCallAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class CreateClaimWithURICall extends ethereum.Call {
  get inputs(): CreateClaimWithURICall__Inputs {
    return new CreateClaimWithURICall__Inputs(this);
  }

  get outputs(): CreateClaimWithURICall__Outputs {
    return new CreateClaimWithURICall__Outputs(this);
  }
}

export class CreateClaimWithURICall__Inputs {
  _call: CreateClaimWithURICall;

  constructor(call: CreateClaimWithURICall) {
    this._call = call;
  }

  get creditor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get debtor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get claimAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get dueBy(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get claimToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get attachment(): CreateClaimWithURICallAttachmentStruct {
    return changetype<CreateClaimWithURICallAttachmentStruct>(
      this._call.inputValues[6].value.toTuple()
    );
  }

  get _tokenUri(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class CreateClaimWithURICall__Outputs {
  _call: CreateClaimWithURICall;

  constructor(call: CreateClaimWithURICall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateClaimWithURICallAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class PayClaimCall extends ethereum.Call {
  get inputs(): PayClaimCall__Inputs {
    return new PayClaimCall__Inputs(this);
  }

  get outputs(): PayClaimCall__Outputs {
    return new PayClaimCall__Outputs(this);
  }
}

export class PayClaimCall__Inputs {
  _call: PayClaimCall;

  constructor(call: PayClaimCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get paymentAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PayClaimCall__Outputs {
  _call: PayClaimCall;

  constructor(call: PayClaimCall) {
    this._call = call;
  }
}

export class RejectClaimCall extends ethereum.Call {
  get inputs(): RejectClaimCall__Inputs {
    return new RejectClaimCall__Inputs(this);
  }

  get outputs(): RejectClaimCall__Outputs {
    return new RejectClaimCall__Outputs(this);
  }
}

export class RejectClaimCall__Inputs {
  _call: RejectClaimCall;

  constructor(call: RejectClaimCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RejectClaimCall__Outputs {
  _call: RejectClaimCall;

  constructor(call: RejectClaimCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescindClaimCall extends ethereum.Call {
  get inputs(): RescindClaimCall__Inputs {
    return new RescindClaimCall__Inputs(this);
  }

  get outputs(): RescindClaimCall__Outputs {
    return new RescindClaimCall__Outputs(this);
  }
}

export class RescindClaimCall__Inputs {
  _call: RescindClaimCall;

  constructor(call: RescindClaimCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RescindClaimCall__Outputs {
  _call: RescindClaimCall;

  constructor(call: RescindClaimCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get baseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetLucidManagerCall extends ethereum.Call {
  get inputs(): SetLucidManagerCall__Inputs {
    return new SetLucidManagerCall__Inputs(this);
  }

  get outputs(): SetLucidManagerCall__Outputs {
    return new SetLucidManagerCall__Outputs(this);
  }
}

export class SetLucidManagerCall__Inputs {
  _call: SetLucidManagerCall;

  constructor(call: SetLucidManagerCall) {
    this._call = call;
  }

  get _lucidManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLucidManagerCall__Outputs {
  _call: SetLucidManagerCall;

  constructor(call: SetLucidManagerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
