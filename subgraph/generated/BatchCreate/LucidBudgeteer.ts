// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LucidBudgeteerCreated extends ethereum.Event {
  get params(): LucidBudgeteerCreated__Params {
    return new LucidBudgeteerCreated__Params(this);
  }
}

export class LucidBudgeteerCreated__Params {
  _event: LucidBudgeteerCreated;

  constructor(event: LucidBudgeteerCreated) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get lucidTxERC721(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get lucidBudgeteer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LucidTagUpdated extends ethereum.Event {
  get params(): LucidTagUpdated__Params {
    return new LucidTagUpdated__Params(this);
  }
}

export class LucidTagUpdated__Params {
  _event: LucidTagUpdated;

  constructor(event: LucidTagUpdated) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get updatedBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tag(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }

  get blocktime(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class LucidBudgeteer__createLucidTxInputClaimStruct extends ethereum.Tuple {
  get claimAmount(): BigInt {
    return this[0].toBigInt();
  }

  get creditor(): Address {
    return this[1].toAddress();
  }

  get debtor(): Address {
    return this[2].toAddress();
  }

  get description(): string {
    return this[3].toString();
  }

  get dueBy(): BigInt {
    return this[4].toBigInt();
  }

  get claimToken(): Address {
    return this[5].toAddress();
  }

  get attachment(): LucidBudgeteer__createLucidTxInputClaimAttachmentStruct {
    return changetype<LucidBudgeteer__createLucidTxInputClaimAttachmentStruct>(
      this[6].toTuple()
    );
  }
}

export class LucidBudgeteer__createLucidTxInputClaimAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class LucidBudgeteer extends ethereum.SmartContract {
  static bind(address: Address): LucidBudgeteer {
    return new LucidBudgeteer("LucidBudgeteer", address);
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createLucidTx(
    claim: LucidBudgeteer__createLucidTxInputClaimStruct,
    lucidTag: Bytes,
    _tokenUri: string
  ): BigInt {
    let result = super.call(
      "createLucidTx",
      "createLucidTx((uint256,address,address,string,uint256,address,(bytes32,uint8,uint8)),bytes32,string):(uint256)",
      [
        ethereum.Value.fromTuple(claim),
        ethereum.Value.fromFixedBytes(lucidTag),
        ethereum.Value.fromString(_tokenUri)
      ]
    );

    return result[0].toBigInt();
  }

  try_createLucidTx(
    claim: LucidBudgeteer__createLucidTxInputClaimStruct,
    lucidTag: Bytes,
    _tokenUri: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createLucidTx",
      "createLucidTx((uint256,address,address,string,uint256,address,(bytes32,uint8,uint8)),bytes32,string):(uint256)",
      [
        ethereum.Value.fromTuple(claim),
        ethereum.Value.fromFixedBytes(lucidTag),
        ethereum.Value.fromString(_tokenUri)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lucidTxERC721(): Address {
    let result = super.call("lucidTxERC721", "lucidTxERC721():(address)", []);

    return result[0].toAddress();
  }

  try_lucidTxERC721(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lucidTxERC721",
      "lucidTxERC721():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _lucidTxERC721(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateLucidTxCall extends ethereum.Call {
  get inputs(): CreateLucidTxCall__Inputs {
    return new CreateLucidTxCall__Inputs(this);
  }

  get outputs(): CreateLucidTxCall__Outputs {
    return new CreateLucidTxCall__Outputs(this);
  }
}

export class CreateLucidTxCall__Inputs {
  _call: CreateLucidTxCall;

  constructor(call: CreateLucidTxCall) {
    this._call = call;
  }

  get claim(): CreateLucidTxCallClaimStruct {
    return changetype<CreateLucidTxCallClaimStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get lucidTag(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _tokenUri(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateLucidTxCall__Outputs {
  _call: CreateLucidTxCall;

  constructor(call: CreateLucidTxCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateLucidTxCallClaimStruct extends ethereum.Tuple {
  get claimAmount(): BigInt {
    return this[0].toBigInt();
  }

  get creditor(): Address {
    return this[1].toAddress();
  }

  get debtor(): Address {
    return this[2].toAddress();
  }

  get description(): string {
    return this[3].toString();
  }

  get dueBy(): BigInt {
    return this[4].toBigInt();
  }

  get claimToken(): Address {
    return this[5].toAddress();
  }

  get attachment(): CreateLucidTxCallClaimAttachmentStruct {
    return changetype<CreateLucidTxCallClaimAttachmentStruct>(
      this[6].toTuple()
    );
  }
}

export class CreateLucidTxCallClaimAttachmentStruct extends ethereum.Tuple {
  get hash(): Bytes {
    return this[0].toBytes();
  }

  get hashFunction(): i32 {
    return this[1].toI32();
  }

  get size(): i32 {
    return this[2].toI32();
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class UpdateLucidTagCall extends ethereum.Call {
  get inputs(): UpdateLucidTagCall__Inputs {
    return new UpdateLucidTagCall__Inputs(this);
  }

  get outputs(): UpdateLucidTagCall__Outputs {
    return new UpdateLucidTagCall__Outputs(this);
  }
}

export class UpdateLucidTagCall__Inputs {
  _call: UpdateLucidTagCall;

  constructor(call: UpdateLucidTagCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newTag(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpdateLucidTagCall__Outputs {
  _call: UpdateLucidTagCall;

  constructor(call: UpdateLucidTagCall) {
    this._call = call;
  }
}
