// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollectorChanged extends ethereum.Event {
  get params(): CollectorChanged__Params {
    return new CollectorChanged__Params(this);
  }
}

export class CollectorChanged__Params {
  _event: CollectorChanged;

  constructor(event: CollectorChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevCollector(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newCollector(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeChanged extends ethereum.Event {
  get params(): FeeChanged__Params {
    return new FeeChanged__Params(this);
  }
}

export class FeeChanged__Params {
  _event: FeeChanged;

  constructor(event: FeeChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class FeeThresholdChanged extends ethereum.Event {
  get params(): FeeThresholdChanged__Params {
    return new FeeThresholdChanged__Params(this);
  }
}

export class FeeThresholdChanged__Params {
  _event: FeeThresholdChanged;

  constructor(event: FeeThresholdChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevFeeThreshold(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newFeeThreshold(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LucidTokenChanged extends ethereum.Event {
  get params(): LucidTokenChanged__Params {
    return new LucidTokenChanged__Params(this);
  }
}

export class LucidTokenChanged__Params {
  _event: LucidTokenChanged;

  constructor(event: LucidTokenChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevLucidToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newLucidToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class MetaTransactionExecuted extends ethereum.Event {
  get params(): MetaTransactionExecuted__Params {
    return new MetaTransactionExecuted__Params(this);
  }
}

export class MetaTransactionExecuted__Params {
  _event: MetaTransactionExecuted;

  constructor(event: MetaTransactionExecuted) {
    this._event = event;
  }

  get userAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get relayerAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class OwnerChanged extends ethereum.Event {
  get params(): OwnerChanged__Params {
    return new OwnerChanged__Params(this);
  }
}

export class OwnerChanged__Params {
  _event: OwnerChanged;

  constructor(event: OwnerChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ReducedFeeChanged extends ethereum.Event {
  get params(): ReducedFeeChanged__Params {
    return new ReducedFeeChanged__Params(this);
  }
}

export class ReducedFeeChanged__Params {
  _event: ReducedFeeChanged;

  constructor(event: ReducedFeeChanged) {
    this._event = event;
  }

  get lucidManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get prevFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blocktime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LucidManager__feeInfoResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class LucidManager__getFeeInfoResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class LucidManager__getTransactionFeeResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class LucidManager extends ethereum.SmartContract {
  static bind(address: Address): LucidManager {
    return new LucidManager("LucidManager", address);
  }

  ERC712_VERSION(): string {
    let result = super.call("ERC712_VERSION", "ERC712_VERSION():(string)", []);

    return result[0].toString();
  }

  try_ERC712_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ERC712_VERSION",
      "ERC712_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): Bytes {
    let result = super.call("description", "description():(bytes32)", []);

    return result[0].toBytes();
  }

  try_description(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("description", "description():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  feeInfo(): LucidManager__feeInfoResult {
    let result = super.call(
      "feeInfo",
      "feeInfo():(address,uint32,uint32,uint32)",
      []
    );

    return new LucidManager__feeInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_feeInfo(): ethereum.CallResult<LucidManager__feeInfoResult> {
    let result = super.tryCall(
      "feeInfo",
      "feeInfo():(address,uint32,uint32,uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LucidManager__feeInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getChainId(): BigInt {
    let result = super.call("getChainId", "getChainId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getChainId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getChainId", "getChainId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeperator(): Bytes {
    let result = super.call(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getDomainSeperator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeperator",
      "getDomainSeperator():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFeeInfo(_holder: Address): LucidManager__getFeeInfoResult {
    let result = super.call(
      "getFeeInfo",
      "getFeeInfo(address):(uint32,address)",
      [ethereum.Value.fromAddress(_holder)]
    );

    return new LucidManager__getFeeInfoResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_getFeeInfo(
    _holder: Address
  ): ethereum.CallResult<LucidManager__getFeeInfoResult> {
    let result = super.tryCall(
      "getFeeInfo",
      "getFeeInfo(address):(uint32,address)",
      [ethereum.Value.fromAddress(_holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LucidManager__getFeeInfoResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  getLucidBalance(_holder: Address): BigInt {
    let result = super.call(
      "getLucidBalance",
      "getLucidBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_holder)]
    );

    return result[0].toBigInt();
  }

  try_getLucidBalance(_holder: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLucidBalance",
      "getLucidBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_holder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNonce(user: Address): BigInt {
    let result = super.call("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);

    return result[0].toBigInt();
  }

  try_getNonce(user: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNonce", "getNonce(address):(uint256)", [
      ethereum.Value.fromAddress(user)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTransactionFee(
    _holder: Address,
    paymentAmount: BigInt
  ): LucidManager__getTransactionFeeResult {
    let result = super.call(
      "getTransactionFee",
      "getTransactionFee(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(paymentAmount)
      ]
    );

    return new LucidManager__getTransactionFeeResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getTransactionFee(
    _holder: Address,
    paymentAmount: BigInt
  ): ethereum.CallResult<LucidManager__getTransactionFeeResult> {
    let result = super.tryCall(
      "getTransactionFee",
      "getTransactionFee(address,uint256):(address,uint256)",
      [
        ethereum.Value.fromAddress(_holder),
        ethereum.Value.fromUnsignedBigInt(paymentAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LucidManager__getTransactionFeeResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  lucidToken(): Address {
    let result = super.call("lucidToken", "lucidToken():(address)", []);

    return result[0].toAddress();
  }

  try_lucidToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("lucidToken", "lucidToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _description(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeBasisPoints(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ExecuteMetaTransactionCall extends ethereum.Call {
  get inputs(): ExecuteMetaTransactionCall__Inputs {
    return new ExecuteMetaTransactionCall__Inputs(this);
  }

  get outputs(): ExecuteMetaTransactionCall__Outputs {
    return new ExecuteMetaTransactionCall__Outputs(this);
  }
}

export class ExecuteMetaTransactionCall__Inputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get userAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get functionSignature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get sigR(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }

  get sigS(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get sigV(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class ExecuteMetaTransactionCall__Outputs {
  _call: ExecuteMetaTransactionCall;

  constructor(call: ExecuteMetaTransactionCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetCollectionAddressCall extends ethereum.Call {
  get inputs(): SetCollectionAddressCall__Inputs {
    return new SetCollectionAddressCall__Inputs(this);
  }

  get outputs(): SetCollectionAddressCall__Outputs {
    return new SetCollectionAddressCall__Outputs(this);
  }
}

export class SetCollectionAddressCall__Inputs {
  _call: SetCollectionAddressCall;

  constructor(call: SetCollectionAddressCall) {
    this._call = call;
  }

  get _collectionAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetCollectionAddressCall__Outputs {
  _call: SetCollectionAddressCall;

  constructor(call: SetCollectionAddressCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get _feeBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetLucidTokenAddressCall extends ethereum.Call {
  get inputs(): SetLucidTokenAddressCall__Inputs {
    return new SetLucidTokenAddressCall__Inputs(this);
  }

  get outputs(): SetLucidTokenAddressCall__Outputs {
    return new SetLucidTokenAddressCall__Outputs(this);
  }
}

export class SetLucidTokenAddressCall__Inputs {
  _call: SetLucidTokenAddressCall;

  constructor(call: SetLucidTokenAddressCall) {
    this._call = call;
  }

  get _lucidTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLucidTokenAddressCall__Outputs {
  _call: SetLucidTokenAddressCall;

  constructor(call: SetLucidTokenAddressCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetReducedFeeCall extends ethereum.Call {
  get inputs(): SetReducedFeeCall__Inputs {
    return new SetReducedFeeCall__Inputs(this);
  }

  get outputs(): SetReducedFeeCall__Outputs {
    return new SetReducedFeeCall__Outputs(this);
  }
}

export class SetReducedFeeCall__Inputs {
  _call: SetReducedFeeCall;

  constructor(call: SetReducedFeeCall) {
    this._call = call;
  }

  get reducedFeeBasisPoints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetReducedFeeCall__Outputs {
  _call: SetReducedFeeCall;

  constructor(call: SetReducedFeeCall) {
    this._call = call;
  }
}

export class SetlucidThresholdCall extends ethereum.Call {
  get inputs(): SetlucidThresholdCall__Inputs {
    return new SetlucidThresholdCall__Inputs(this);
  }

  get outputs(): SetlucidThresholdCall__Outputs {
    return new SetlucidThresholdCall__Outputs(this);
  }
}

export class SetlucidThresholdCall__Inputs {
  _call: SetlucidThresholdCall;

  constructor(call: SetlucidThresholdCall) {
    this._call = call;
  }

  get _threshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetlucidThresholdCall__Outputs {
  _call: SetlucidThresholdCall;

  constructor(call: SetlucidThresholdCall) {
    this._call = call;
  }
}
