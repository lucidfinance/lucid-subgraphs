enum ClaimType {
  Invoice
  Payment
}

enum ClaimStatus {
  Pending
  Paid
  Rejected
  Rescinded
  Repaying
}
# it seems like these 3 interfaces are redundant, but it is a way to infer the filtering of derived events.
# it is also a result of unions not being supported in the Graph's version of graphQL

# base event log with event metadata
interface EventLog {
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

interface ClaimEvent {
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

## BEGIN EVENTS:
type TransferEvent implements ClaimEvent & EventLog @entity {
  id: ID! #Transfer-TOKENID-TRANSACTION_HASH-LOG_INDEX
  from: Bytes! #address
  to: Bytes! #address
  tokenId: String!
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LucidTagUpdatedEvent implements ClaimEvent & EventLog @entity {
  id: ID! #LucidTagUpdated-TOKENID-TRANSACTION_HASH-LOG_INDEX
  lucidManager: Bytes! #address
  claim: Claim!
  updatedBy: Bytes! #address
  tag: String!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type FeePaidEvent implements ClaimEvent & EventLog @entity {
  id: ID! #FeePaid-TOKENID-TRANSACTION_HASH-LOG_INDEX
  lucidManager: Bytes! #address
  claim: Claim!
  collectionAddress: Bytes! #address
  paymentAmount: BigInt!
  transactionFee: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimRejectedEvent implements ClaimEvent & EventLog @entity {
  id: ID! #ClaimRejected-TOKENID-TRANSACTION_HASH-LOG_INDEX
  managerAddress: Bytes! #address TODO: normalize this to lucidManager in v2
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimRescindedEvent implements ClaimEvent & EventLog @entity {
  id: ID! #ClaimRescinded-TOKENID-TRANSACTION_HASH-LOG_INDEX
  lucidManager: Bytes! #address
  claim: Claim!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimPaymentEvent implements ClaimEvent & EventLog @entity {
  id: ID! #ClaimPayment-TOKENID-TRANSACTION_HASH-LOG_INDEX
  lucidManager: Bytes! #address
  claim: Claim!
  debtor: Bytes! #address
  paidBy: Bytes! #address
  paymentAmount: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type ClaimCreatedEvent implements ClaimEvent & EventLog @entity {
  id: ID!
  claim: Claim!
  lucidManager: Bytes! #address
  parent: Bytes! #address TODO: change this?
  creator: Bytes! #address
  debtor: Bytes! #address
  creditor: Bytes! #address
  claimToken: Token! #address
  description: String!
  ipfsHash: String
  amount: BigInt!
  dueBy: BigInt!
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LucidManagerSetEvent implements EventLog @entity {
  id: ID!
  prevLucidManager: Bytes! #address
  newLucidManager: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

type LucidBudgeteerCreatedEvent implements EventLog @entity {
  id: ID!
  lucidManager: Bytes! #address
  lucidClaimERC721: Bytes! #address
  lucidBudgeteer: Bytes! #address
  eventName: String!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
  timestamp: BigInt!
}

##END EVENTS ^^^

type AccountTag @entity {
  id: ID! #TOKENID-USER_ADDRESS
  claim: Claim!
  userAddress: Bytes! #address
  tag: String!
}

type Claim @entity {
  id: ID! #ClaimCreatedEvent-TOKENID-TX_HASH-LOG_INDEX
  tokenId: String!
  logs: [ClaimEvent!]! @derivedFrom(field: "claim")
  accountTag: [AccountTag!]! @derivedFrom(field: "claim")
  ipfsHash: String
  creator: User! # address
  creditor: User! # address
  debtor: User! # address
  amount: BigInt!
  paidAmount: BigInt!
  isTransferred: Boolean!
  description: String!
  created: BigInt!
  dueBy: BigInt!
  claimType: ClaimType!
  token: Token!
  status: ClaimStatus!
  transactionHash: Bytes!
  lucidClaimAddress: Bytes! #address
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedTimestamp: BigInt!
}

type Token @entity {
  id: ID!
  address: Bytes! #address
  decimals: Int!
  symbol: String!
  network: String!
  isNative: Boolean!
}

type User @entity {
  id: ID!
  address: Bytes! #address
  claims: [Claim!]!
}

type LucidManager @entity {
  id: ID!
  address: Bytes #address
  owner: Bytes #address
  description: String
  lucidToken: Token
  feeCollectionAddress: User
  feeBasisPoints: Int
  reducedFeeBasisPoints: Int
  lucidTokenThreshold: Int #the amount of tokens to get a reduced fee
  lastUpdatedBlockNumber: BigInt!
  lastUpdatedTimestamp: BigInt!
}

# 1 config object for each safe using lucidBudgeteer
type LucidBudgeteerGnosisModuleConfig @entity {
  id: ID! #GnosisSafe:SAFE_ADDRESS-ModuleConfig
  moduleAddress: Bytes! #address
  prevModuleAddress: Bytes #address
  safeAddress: Bytes! #address
  safe: User! #address
  version: String!
  installationTimestamp: BigInt!
}
